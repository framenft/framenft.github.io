{"version":3,"sources":["contracts/external_contracts.js","hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","hooks/UserProvider.js","hooks/useExternalContractLoader.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","helpers/ipfs.js","helpers/index.js","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/FunctionForm.jsx","components/Faucet.jsx","components/Timeline.jsx","Mint.jsx","Update.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.jsx","contracts/Frames.address.js","contracts/Frames.abi.js"],"names":["module","exports","contracts","DAI","address","abi","inputs","internalType","name","type","payable","stateMutability","anonymous","indexed","constant","outputs","UNI","useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","ethers","require","useContractLoader","providerOrSigner","config","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","useBurnerSigner","key","setSigner","storedValue","setStoredValue","window","localStorage","setItem","error","storedKey","getItem","_newKey","Wallet","createRandom","privateKey","_signer","connect","useUserSigner","injectedProvider","localProvider","burnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Date","now","useExternalContractLoader","ABI","optionalBytecode","contract","setContract","customContract","bytecode","loadContract","Typography","Text","utils","INFURA_ID","NETWORKS","localhost","color","blockExplorer","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","JSON","parse","stringify","body","obj","errorObj","host","port","protocol","getURLParam","param","queryString","search","URLSearchParams","get","Paragraph","Account","userSigner","mainnetProvider","minimized","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","push","style","verticalAlign","marginLeft","marginTop","shape","size","onClick","useThemeSwitcher","currentTheme","display","constants","BigNumber","TextArea","Input","ipfsClient","createIPFSClient","Mint","props","useHistory","showModal","setShowModal","loading","setLoading","baseFile","setBaseFile","setDescription","ref","contractInstance","ContractAddress","FramesAbi","React","maxSupply","Frames","mintedSoFar","getBase64","file","reader","FileReader","readAsDataURL","onload","base64ImageString","canvas","document","getElementById","context","getContext","img1","Image","img2","width","height","src","globalAlpha","drawImage","toDataURL","formatFrame","onerror","urlToObject","imageURL","fetch","response","blob","File","mintBtnClick","alert","add","imageUpload","imagePath","path","dt","image","parseInt","timestamp","interface","encodeFunctionData","to","parseEther","toString","position","left","top","backgroundColor","justifyContent","files","flexDirection","fontSize","placeholder","target","border","textDecoration","textAlign","formatUnits","href","ShowIteration","Update","setId","iterations","setIterations","newImageSet","setNewImageSet","tokenURI","owner","getData","d","i","concat","res","json","getImage","text","b64","setup","urlId","gatherHistory","updateBtnClick","reload","urlParams","set","Loading3QuartersOutlined","LoadingOutlined","map","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","enable","authereum","Authereum","App","_network","setInjectedProvider","setAddress","clearCachedProvider","disconnect","setPrice","Token","Fetcher","fetchPairData","WETH","pair","route","Route","parseFloat","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","then","newGasPrice","catch","useGasPrice","useUserProvider","getAddress","newAddress","localChainId","selectedChainId","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","mainnetContracts","_lastBlockNumber","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","pop","removeListener","useEventListener","networkDisplay","networkSelected","networkLocal","zIndex","right","padding","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","Web3Provider","code","reason","setRoute","className","exact","fontFamily","class","fontWeight","themes","dark","light","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme"],"mappings":"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","file":"static/js/main.3bdc1bab.chunk.js","sourcesContent":["const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n        setTried(true);\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      if (DEBUG) console.log(\"on-blocking!\", contractName, functionName);\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  when you want to load an existing contract using just the provider, address, and ABI\n*/\n\nexport default function useExternalContractLoader(provider, address, ABI, optionalBytecode) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && address && ABI) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, ABI, signer);\n          if(optionalBytecode) customContract.bytecode = optionalBytecode\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING EXTERNAL CONTRACT AT \"+address+\" (check provider, address, and ABI)!!\", e);\n        }\n      }\n    }\n    loadContract();\n  }, [provider, address, ABI, optionalBytecode]);\n  return contract;\n}\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n        if(!e.error && e.message){\n          message = e.message\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try{\n          let obj = JSON.parse(message)\n          if(obj && obj.body){\n            let errorObj = JSON.parse(obj.body)\n            if(errorObj && errorObj.error && errorObj.error.message){\n              message = errorObj.error.message\n            }\n          }\n        }catch(e){\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","const IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\nexport default ipfs;","export { default as Transactor } from \"./Transactor\";\nexport { default as ipfs } from \"./ipfs\";\n\n\nexport function standardizeLink (link) {  \n    if (link) {\n        link = link.replace(\"ipfs://ipfs/\", \"https://ipfs.io/ipfs/\")\n        return link.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } else {\n        return \"\";\n    }\n  };\n\n  export function ipfsLinkFromHash(hash) {\n      return \"https://ipfs.io/ipfs/\"+hash;\n  }\n\n  export function getURLParam(param) {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    return urlParams.get(param);\n  }","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n     \n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Alert, Button, Col, Menu, Row, Input, InputNumber } from \"antd\";\nconst { TextArea } = Input;\nimport P5Wrapper from 'react-p5-wrapper';\nconst { ethers } = require(\"ethers\");\nimport { formatEther, formatUnits, parseEther } from \"ethers/lib/utils\";\nimport { Link } from \"react-router-dom\";\nimport {\n    useBalance,\n    useContractLoader,\n    useContractReader,\n    useExternalContractLoader,\n    useEventListener,\n    useExchangePrice,\n    useGasPrice,\n    useOnBlock,\n    useUserProvider,\n} from \"./hooks\";\nimport { create as createIPFSClient } from'ipfs-http-client';\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport FramesAbi from \"./contracts/Frames.abi\";\nimport { getURLParam } from \"./helpers\";\nimport ContractAddress from \"./contracts/Frames.address\";\n\n\n\nfunction Mint(props) {\n    const { useHistory, tx, provider, userSigner, price, logoutOfWeb3Modal, blockExplorer, loadWeb3Modal, web3Modal, address } = props;\n    const [showModal, setShowModal] = useState(true);\n    const [loading, setLoading] = useState();\n    const [baseFile, setBaseFile] = useState();\n    const DESCRIPTION_PLACEHOLDER = \"Interpretation is a product of perspective. The frame from which we see things shapes our experience, now it can shape the things as well. Frame explores the intersection of art and ownership to create a piece of media that is effected by its owners in a way that has never been possible before.\";\n    const [description, setDescription] = useState(DESCRIPTION_PLACEHOLDER);\n\n    let ref = getURLParam(\"ref\");\n    if (!ref) {\n      ref = \"0x0000000000000000000000000000000000000000\";\n    }\n    console.log(`ref is ${ref}`);\n\n    const contractInstance = useExternalContractLoader(provider, ContractAddress, FramesAbi);\n    console.log(`contractInstance is ${contractInstance}, userSigner ${userSigner}`);\n    console.log(provider);\n    console.log(userSigner);\n    React.useEffect(() => {\n       \n    }, [userSigner, provider, tx]);\n\n    // keep track of a variable from the contract in the local React state:\n    const maxSupply = useContractReader({ Frames: contractInstance }, \"Frames\", \"maxSupply\");\n    console.log(`max supply is ${maxSupply}`);\n    const mintedSoFar = useContractReader({ Frames: contractInstance }, \"Frames\", \"minted\");\n    console.log(`mintedSoFar is ${mintedSoFar}`);\n\n    function getBase64(file) {\n        var reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n            console.log(reader.result);\n            setBaseFile(reader.result);\n           formatFrame(reader.result);\n        };\n        reader.onerror = function (error) {\n            console.log('Error: ', error);\n        };\n    }\n\n    function formatFrame(base64ImageString) {\n        var canvas = document.getElementById('canvas');\n        var context = canvas.getContext('2d');\n        var img1 = new Image();\n        var img2 = new Image();\n        img1.onload = function () {\n            canvas.width = 400;\n            canvas.height = 400;\n\n            img2.src = \"bg.png\";\n        };\n        img2.onload = function () {\n            context.globalAlpha = 1.0;\n            context.drawImage(img1, 0, 0, img1.width, img1.height, canvas.width / 10, canvas.height / 20 * 3, canvas.width * 0.73, canvas.height * 0.76);\n            //  context.globalAlpha = 0.5; //Remove if pngs have alpha\n            context.drawImage(img2, 0, 0, img2.width, img2.height, 0, 0, canvas.width, canvas.height);\n        };\n\n        img1.src = base64ImageString;\n        setBaseFile(canvas.toDataURL());\n    }\n\n    const urlToObject= async(imageURL)=> {\n        console.log(`getting ${imageURL}`);\n        const response = await fetch(imageURL);\n        // here image is url/location of image\n        const blob = await response.blob();\n        const file = new File([blob], 'image.jpg', {type: blob.type});\n        console.log(file);\n        getBase64(file);\n      }\n\n      const mintBtnClick = async (contractInstance) => {\n        console.log(`base file ${baseFile}`)\n         console.log(baseFile);\n         if (!baseFile) {\n             alert(\"Please fill the frame first\");\n         } else {\n            setLoading(true);\n            const imageUpload = await ipfsClient.add(baseFile);\n            const imagePath = `https://ipfs.io/ipfs/${imageUpload.path}`;\n            var dt = { image: imagePath, name: `Frame #${parseInt(mintedSoFar) + 1}`, description, timestamp: Date.now() };\n            const { path } = await ipfsClient.add(JSON.stringify(dt));\n            console.log([address, `https://ipfs.io/ipfs/${path}`, ref]);\n            const data = contractInstance.interface.encodeFunctionData(\"mint\", [address, `https://ipfs.io/ipfs/${path}`, ref]);\n            await tx(\n                userSigner.sendTransaction({\n                    to: ContractAddress,\n                    data: data,\n                    value: parseEther((0.02).toString()),\n                }),\n            );\n            setLoading(false);\n            window.location.replace(window.location.protocol+\"//\"+window.location.host+\"/update?id=\"+(parseInt(mintedSoFar) + 1));\n      \n         }\n        }\n\n\n    return (\n        <div style={{ height: \"100%\"}}>\n            <div style={{position: \"absolute\", left: \"2%\", top:\"2%\"}}>\n            <Link to={\"/\"}> 🏠  </Link></div>\n            <div  style={{ display: showModal ? \"block\" : \"none\",}} >\n                <div style={{ backgroundColor: \"antiquewhite\", color: \"black\" }}>\n                    <h1 style={{ color: \"black\" }}>This blank canvas is your's to fill:</h1>\n                    <p style={{ color: \"darkgray\" }}><i>Each frame is a unique art piece created by you. {baseFile ? \"Below you can preview your framed image:\" : \" To begin use the file input below to upload the first image you would like to display in your frame.\"}</i></p>\n                    {baseFile ?\n                        <div>\n                            <p><b>STEP 1: ✅</b></p>\n                            <canvas id=\"canvas\"></canvas>\n                        </div>\n                        :\n                        <>\n                            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}> <input type=\"file\" id=\"fileToUse\" onChange={(e) => {\n                                setBaseFile(getBase64(document.getElementById(\"fileToUse\").files[0]))\n                                console.log(baseFile)\n                                console.log(getBase64(document.getElementById(\"fileToUse\").files[0]))\n\n                            }} /> <div style={{display: \"flex\", flexDirection: \"column\"}}><>OR</> <p style={{fontSize: \"xx-small\", color: \"limegreen\"}}>(Only Image Files/URLs are allowed)</p>\n                            </div> <input type=\"text\" id=\"linkToUse\" placeholder=\"URL of image\" onChange={(e) => { urlToObject(e.target.value) }}/> </div>\n                        </>\n                    }\n\n                    {baseFile ? \n                    <>\n                    <p><b>STEP 2:</b> (Optionally) Customize the description of your art piece.</p>\n                    <TextArea\n                    style={{ border: \"none\", textDecoration: \"none\", textAlign: \"center\", color: \"black\" }}\n                    placeholder={''}\n                    backgroundColor=\"white\"\n                    value={description}\n                    onChange={(e) => {\n                        //localStorage.clear();\n                        setDescription(e.target.value)\n                    }}\n                /></>\n                    : <></>}\n                 \n\n                    <br />\n                    <br />\n\n                    <p>{formatUnits(mintedSoFar ? mintedSoFar : \"0\", \"wei\")}/{formatUnits(maxSupply ? maxSupply : \"0\", \"wei\")} art pieces framed</p>\n                    {!loading ?\n                        (userSigner ?\n                            <Button style={{ color: \"black\" }} onClick={()=>mintBtnClick(contractInstance)}>Frame Your Art</Button>\n                            :\n                            <div onClick={() => setShowModal(false)}>\n                                <Account\n                                    address={address}\n                                    /*  localProvider={localProvider} */\n                                    userSigner={userSigner}\n                                    mainnetProvider={provider}\n                                    price={price}\n                                    web3Modal={web3Modal}\n                                    loadWeb3Modal={loadWeb3Modal}\n                                    logoutOfWeb3Modal={logoutOfWeb3Modal}\n                                    blockExplorer={blockExplorer}\n                                />\n                            </div>\n                        )\n                        : <>Loading...</>\n                    }\n\n                    <div style={{ display: \"none\" }}>\n                    </div>\n                    <br />\n                    <br />\n                    {/* <img src=\"./samples.gif\" width=\"60\" height=\"70\" />\n */}\n                    <br />\n\n                    <br />\n                    {provider ?\n                        <p>Refer someone and earn 10% of their mint fee:<br />\n                            <a href={`https://pillz.art/?ref=${address}`}>{`https://pillz.art/?ref=${address}`}</a></p>\n                        : <></>}\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Mint;","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Alert, Button, Col, Menu, Row, Input, InputNumber } from \"antd\";\nconst { TextArea } = Input;\nimport P5Wrapper from 'react-p5-wrapper';\nconst { ethers } = require(\"ethers\");\nimport { formatEther, formatUnits, parseEther } from \"ethers/lib/utils\";\nimport { Link } from \"react-router-dom\";\nimport {\n    useBalance,\n    useContractLoader,\n    useContractReader,\n    useExternalContractLoader,\n    useEventListener,\n    useExchangePrice,\n    useGasPrice,\n    useOnBlock,\n    useUserProvider,\n} from \"./hooks\";\nimport { create as createIPFSClient } from 'ipfs-http-client';\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport FramesAbi from \"./contracts/Frames.abi\";\nimport { getURLParam } from \"./helpers\";\nimport ContractAddress from \"./contracts/Frames.address\";\nimport { Loading3QuartersOutlined, LoadingOutlined } from \"@ant-design/icons\";\n\n\nfunction ShowIteration(props) {\n    const { data } = props;\n\n    return (\n        <>\n            {data ?\n                <div style={{ border: \"1px solid black\" }}>\n                    <img src={data.image} />\n                    <p><b>{new Date(data.timestamp).toString()}</b></p>\n                    <p>{data.description}</p>\n                </div>\n                : <>Loading past iteration...</>}\n        </>\n    )\n}\n\n\nfunction Update(props) {\n    const { tx, address, provider, userSigner, price, logoutOfWeb3Modal, blockExplorer, loadWeb3Modal, web3Modal } = props;\n    const [showModal, setShowModal] = useState(true);\n    const [loading, setLoading] = useState();\n    const [id, setId] = useState();\n    const [baseFile, setBaseFile] = useState(\"\");\n    const DESCRIPTION_PLACEHOLDER = \"Interpretation is a product of perspective. The frame from which we see things shapes our experience, now it can shape the things as well. Frame explores the intersection of art and ownership to create a piece of media that is effected by its owners in a way that has never been possible before.\";\n    const [description, setDescription] = useState();\n    const [iterations, setIterations] = useState([]);\n    const [newImageSet, setNewImageSet] = useState(false);\n\n    const contractInstance = useExternalContractLoader(provider, ContractAddress, FramesAbi);\n\n\n\n\n    // keep track of a variable from the contract in the local React state:\n    const tokenURI = useContractReader({ Frames: contractInstance }, \"Frames\", \"tokenURI\", [id]);\n    const history = useContractReader({ Frames: contractInstance }, \"Frames\", \"history\", [id]);\n    const owner = useContractReader({ Frames: contractInstance }, \"Frames\", \"ownerOf\", [id]);\n    if (baseFile == \"\") {\n        setup();\n    }\n\n    async function setup() {\n        if (!newImageSet) {\n            const d = await getData(tokenURI);\n            setBaseFile(d.image);\n            setDescription(d.description);\n        }\n    }\n\n    console.log(`iterations is ${iterations}`);\n    console.log(iterations)\n    console.log(history)\n\n\n    React.useEffect(() => {\n        let urlId = getURLParam(\"id\");\n        if (urlId & !id) {\n            setId(urlId);\n            setDescription(DESCRIPTION_PLACEHOLDER)\n\n        }\n\n        if (history && iterations.length != history.length) {\n            gatherHistory(history);\n        }\n\n\n    }, [userSigner, id, history]);\n\n    async function gatherHistory(history) {\n        for (var i = 0; i < history.length; i++) {\n            const d = await getData(history[i]);\n            setIterations([d].concat(iterations));\n        }\n    }\n\n    async function getData(tokenURI) {\n        const res = await fetch(tokenURI);\n        const data = await res.json();\n        console.log(data);\n        console.log(\"^tokendata\");\n        const image = await getImage(data.image);\n        data.image = image;\n        return data;\n\n    }\n\n    async function getImage(imageURL) {\n        const res = await fetch(imageURL);\n        const b64 = await res.text();\n        return b64;\n    }\n\n    function getBase64(file) {\n        var reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = function () {\n            console.log(reader.result);\n            setBaseFile(reader.result);\n            formatFrame(reader.result);\n        };\n        reader.onerror = function (error) {\n            console.log('Error: ', error);\n        };\n    }\n\n    function formatFrame(base64ImageString) {\n        var canvas = document.getElementById('canvas');\n        var context = canvas.getContext('2d');\n        var img1 = new Image();\n        var img2 = new Image();\n        img1.onload = function () {\n            canvas.width = 400;\n            canvas.height = 400;\n\n            img2.src = \"bg.png\";\n        };\n        img2.onload = function () {\n            context.globalAlpha = 1.0;\n            context.drawImage(img1, 0, 0, img1.width, img1.height, canvas.width / 10, canvas.height / 20 * 3, canvas.width * 0.73, canvas.height * 0.76);\n            //  context.globalAlpha = 0.5; //Remove if pngs have alpha\n            context.drawImage(img2, 0, 0, img2.width, img2.height, 0, 0, canvas.width, canvas.height);\n        };\n\n        img1.src = base64ImageString;\n        setBaseFile(canvas.toDataURL());\n    }\n\n    const urlToObject = async (imageURL) => {\n        console.log(`getting ${imageURL}`);\n        const response = await fetch(imageURL);\n        // here image is url/location of image\n        const blob = await response.blob();\n        const file = new File([blob], 'image.jpg', { type: blob.type });\n        console.log(file);\n        getBase64(file);\n    }\n\n    const updateBtnClick = async (contractInstance) => {\n        console.log(`base file ${baseFile}`)\n        console.log(baseFile);\n        if (!baseFile) {\n            alert(\"Please fill the frame first\");\n        } else {\n            setLoading(true);\n            const imageUpload = await ipfsClient.add(baseFile);\n            const imagePath = `https://ipfs.io/ipfs/${imageUpload.path}`;\n            var dt = { image: imagePath, name: `Frame #${id}`, description, timestamp: Date.now() };\n            const { path } = await ipfsClient.add(JSON.stringify(dt));\n            const data = contractInstance.interface.encodeFunctionData(\"update\", [id, `https://ipfs.io/ipfs/${path}`]);\n            await tx(\n                userSigner.sendTransaction({\n                    to: ContractAddress,\n                    data: data,\n                    value: 0,\n                }),\n            );\n            setLoading(false);\n            window.location.reload();\n        }\n    }\n\n    function showImage() {\n        if (newImageSet) {\n            return (<canvas id=\"canvas\"></canvas>)\n        } else {\n            return <img src={baseFile} />\n        }\n    }\n\n    return (\n        <div>\n            <div style={{ position: \"absolute\", left: \"2%\", top: \"2%\" }}>\n                <Link to={\"/\"}> 🏠  </Link></div>\n            <div style={{ display: showModal ? \"block\" : \"none\" }} >\n                <div style={{ backgroundColor: \"antiquewhite\", color: \"black\" }}>\n                    <h1 style={{ color: \"black\" }} placeholder=\"enter nft id\">Enter ID:</h1>\n                    <input type=\"text\" value={id} onChange={(e) => {\n                        if (e.target.value != \"\") {\n                            const urlParams = new URLSearchParams(window.location.search);\n\n                            urlParams.set('id', e.target.value);\n\n                            window.location.search = urlParams;\n                        }\n                        setId(e.target.value)\n                    }\n                    } />\n                    <br />\n                    {\n                        showImage()}\n                    {baseFile ?\n                        <div>\n                            {baseFile.includes(\"data:\") ?\n                                <></> :\n                                <>\n                                    <Loading3QuartersOutlined />\n                                    <p style={{ color: \"darkgray\" }}><i>Your image is being downloaded from the interplanetary file system...</i></p>\n                                </>\n                            }\n                        </div>\n                        :\n                        (id ?\n                            <>\n                                <br />\n                                <LoadingOutlined />\n                                <p style={{ color: \"darkgray\" }}><i>Your image is being downloaded from the interplanetary file system...</i></p>\n                            </>\n                            : <></>)\n\n                    }\n\n                    {baseFile && (owner == address) ?\n                        <>\n                            <h3 style={{ color: \"black\" }}>As Owner You can update this Frame whenever you want: </h3>\n                            <>\n                                <div style={{ display: \"flex\", justifyContent: \"space-around\" }}> <input type=\"file\" id=\"fileToUse\" onChange={(e) => {\n                                    getBase64(document.getElementById(\"fileToUse\").files[0]);\n                                    console.log(baseFile);\n                                    console.log(getBase64(document.getElementById(\"fileToUse\").files[0]));\n                                    setNewImageSet(true);\n\n                                }} /> <div style={{ display: \"flex\", flexDirection: \"column\" }}><>OR</> <p style={{ fontSize: \"xx-small\", color: \"limegreen\" }}>(Only Image Files/URLs are allowed)</p>\n                                    </div> <input type=\"text\" id=\"linkToUse\" placeholder=\"URL of image\" onChange={(e) => { urlToObject(e.target.value); setNewImageSet(true); }} /> </div>\n                            </>\n\n                            <TextArea\n                                style={{ width: \"80%\", textDecoration: \"none\", textAlign: \"center\", color: \"black\" }}\n                                placeholder={''}\n                                backgroundColor=\"white\"\n                                value={description}\n                                onChange={(e) => {\n                                    //localStorage.clear();\n                                    setDescription(e.target.value)\n                                }}\n                            /></>\n                        : <></>}\n\n\n                    <br />\n                    <br />\n\n                    {!loading ?\n                        (userSigner ?\n                            <Button style={{ color: \"black\" }} onClick={() => updateBtnClick(contractInstance)}>Reframe Your Art</Button>\n                            :\n                            <div onClick={() => setShowModal(false)}>\n                                <Account\n                                    address={address}\n                                    /*  localProvider={localProvider} */\n                                    userSigner={userSigner}\n                                    mainnetProvider={provider}\n                                    price={price}\n                                    web3Modal={web3Modal}\n                                    loadWeb3Modal={loadWeb3Modal}\n                                    logoutOfWeb3Modal={logoutOfWeb3Modal}\n                                    blockExplorer={blockExplorer}\n                                />\n                            </div>\n                        )\n                        : <>Loading...</>\n                    }\n\n                    <div style={{ display: \"none\" }}>\n                    </div>\n                    <br />\n                    <br />\n                    {/* <img src=\"./samples.gif\" width=\"60\" height=\"70\" />\n */}\n                    <br />\n\n                    <br />\n                    {iterations ?\n                        <>\n                            <h3 style={{ color: \"black\" }}>👇explore the history of this frame👇</h3>\n                            {iterations.map(e => <ShowIteration data={e} />)}\n                        </>\n                        : <></>}\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Update;","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row, Input,InputNumber } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch  } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useExternalContractLoader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserProvider,\n} from \"./hooks\";\nimport Portis from \"@portis/web3\";\nimport Fortmatic from \"fortmatic\";\nimport Authereum from \"authereum\";\n\nimport { formatEther, formatUnits, parseEther } from \"ethers/lib/utils\";\n\nimport P5Wrapper from 'react-p5-wrapper';\nimport pillSketch from \"./sketch\";\n\n\nconst { ethers } = require(\"ethers\");\n\n\nimport { create as createIPFSClient } from'ipfs-http-client';\nimport Mint from \"./Mint\";\nimport Update from \"./Update\";\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nconst FramesAddress = \"0xe097f86d37152e246cd501f34796f35714877765\";\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.optimism; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\nconst poktMainnetProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\") : null;\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: 'coinbase',\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(\n  `https://mainnet.infura.io/v3/${INFURA_ID}`,\n  1,\n);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n\n    },\n    portis: {\n      display: {\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n        name: \"Portis\",\n        description: \"Connect to Portis App\",\n      },\n      package: Portis,\n      options: {\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n      },\n    },\n    fortmatic: {\n      package: Fortmatic, // required\n      options: {\n        key: \"pk_live_5A7C91B2FC585A17\", // required\n      },\n    },\n    // torus: {\n    //   package: Torus,\n    //   options: {\n    //     networkParams: {\n    //       host: \"https://localhost:8545\", // optional\n    //       chainId: 1337, // optional\n    //       networkId: 1337 // optional\n    //     },\n    //     config: {\n    //       buildEnv: \"development\" // optional\n    //     },\n    //   },\n    // },\n    'custom-walletlink': {\n      display: {\n        logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',\n        name: 'Coinbase',\n        description: 'Connect to Coinbase Wallet (not Coinbase App)',\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n    authereum: {\n      package: Authereum, // required\n    }\n  },\n});\n\n\n\nfunction App(props) {\n  const mainnetProvider = poktMainnetProvider && poktMainnetProvider._isProvider ? poktMainnetProvider : scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [loading, setLoading] = useState();\n \n\n  \n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserProvider(injectedProvider/* , localProvider */);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        console.log(`got address ${newAddress}`)\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    console.log(networkSelected);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n\n\n  console.log(`userProvdier is ${userSigner}`);\n  console.log(userSigner);\n  console.log(`address is ${address}`);\n\n \n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      {/* <Header /> */}\n      {networkDisplay}\n      <BrowserRouter>\n\n        \n            <Switch>\n            <Route exact path=\"/\">\n              <>\n              <div style={{top:\"17%\", position: \"absolute\", width: \"100%\", fontSize: \"xxx-large\", fontFamily: \"monospace\"}}>\n\n              <h1>FRAMES</h1>\n              <p style={{fontSize: \"small\", width: \"48%\", left: \"26%\", position: \"relative\"}}>A iterative are piece to express yourself. Frame allows you to put whatever image you want into it. this way you can set your Twitter nft pfp once and then update it onchain as your tastes and interests evolve.</p>\n              \n              <br/>\n              </div>\n              <br/>\n               <Link to={\"mint\"} ><div id=\"mintbtn\" class=\"navButton\" onClick={() => {\n                  console.log(\"setting show modal to true\");\n                //  setShowModal(true)\n               // document.getElementById(\"mint-route\").click();\n                  \n                }}><p style={{position: \"relative\", top: \"115%\", left: \"-20%\", fontWeight: \"bold\"}}>MINT</p>\n                 </div></Link>\n                 <Link to={\"update\"} ><div id=\"updatebtn\" class=\"navButton\" onClick={() => {\n                }}><p style={{position: \"relative\",top: \"115%\", left: \"-18%\", fontWeight: \"bold\"}}>VIEW/UPDATE</p>\n                 </div></Link>\n                 <div id=\"marketplace1\"  class=\"navButton\" onClick={() => {\n                  window.open(\"https://quixotic.io/\");\n                }}><p style={{position: \"relative\", top: \"115%\", left: \"-28%\", fontWeight: \"bold\"}}>Official<br/>Quixotic</p></div> \n                <div id=\"marketplace2\" class=\"navButton\"  onClick={() => {\n                  window.open(\"https://tofunft.com/\");\n                }}><p style={{position: \"relative\",top: \"115%\", left: \"-25%\", fontWeight: \"bold\"}}>Official<br/>TofuNFT</p></div>\n              </>\n            </Route>\n            <Route path=\"/mint\">\n              <Mint tx={tx} provider={injectedProvider} userSigner={userSigner} blockExplorer={blockExplorer} web3Modal={web3Modal} loadWeb3Modal={loadWeb3Modal} logoutOfWeb3Modal={logoutOfWeb3Modal} price={price} address={address}/>\n            </Route>\n  \n            <Route path=\"/update\">\n              <Update tx={tx} provider={injectedProvider} userSigner={userSigner} blockExplorer={blockExplorer} web3Modal={web3Modal} loadWeb3Modal={loadWeb3Modal} logoutOfWeb3Modal={logoutOfWeb3Modal} price={price} address={address}/>\n            </Route>\n  \n          </Switch>\n    \n      </BrowserRouter>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","module.exports = \"0x81beb40eA24A7708F2Ec0395bf39c5BA61072565\";","module.exports = [\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"approved\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"ApprovalForAll\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"Mint\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"add\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addToWhitelist\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"baseURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getApproved\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"history\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string[]\",\n        \"name\": \"\",\n        \"type\": \"string[]\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isApprovedForAll\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"iterations\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"maxSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"uri\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"referal\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"mintPrice\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"minted\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"ownerOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_data\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"setApprovalForAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"newowner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"setOwner\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes4\",\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\"\n      }\n    ],\n    \"name\": \"supportsInterface\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"index\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenByIndex\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"index\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenOfOwnerByIndex\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"uri\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"update\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"wl\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];"],"sourceRoot":""}